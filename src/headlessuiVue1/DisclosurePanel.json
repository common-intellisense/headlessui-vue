{
  "name": "DisclosurePanel",
  "props": {
    "as": {
      "default": "div",
      "value": "",
      "type": "String | Component",
      "description": "The element or component the DisclosurePanel should render as.",
      "description_zh": "DisclosurePanel 应呈现为的元素或组件。"
    },
    "static": {
      "default": "false",
      "value": "",
      "type": "Boolean",
      "description": "Whether the element should ignore the internally managed open/closed\nstate.Note: static and unmount can not be used at the same time. You will\nget a TypeScript error if you try to do it.",
      "description_zh": "元素是否应忽略内部管理的 open/closed\n州。注意：static 和 unmount 不能同时使用。您将\n如果尝试这样做，则会收到 TypeScript 错误。"
    },
    "unmount": {
      "default": "true",
      "value": "",
      "type": "Boolean",
      "description": "Whether the element should be unmounted or hidden based on the\nopen/closed state.Note: static and unmount can not be used at the same time. You will\nget a TypeScript error if you try to do it.",
      "description_zh": "元素应该被卸载还是隐藏，这取决于\n打开/关闭状态。注意：static 和 unmount 不能同时使用。您将\n如果尝试这样做，则会收到 TypeScript 错误。"
    }
  },
  "link": "https://headlessui.com/v1/vue/disclosure",
  "link_zh": "https://headlessui.com/v1/vue/disclosure",
  "typeDetail": {},
  "events": [],
  "methods": [],
  "slots": [
    {
      "name": "open",
      "params": "Boolean",
      "description": "Whether or not the disclosure is open.",
      "description_zh": "无论披露是否公开。"
    },
    {
      "name": "close",
      "params": "(ref?: ref | HTMLElement) => void",
      "description": "Closes the disclosure and refocuses DisclosureButton. Optionally pass in\na ref or HTMLElement to focus that element instead.",
      "description_zh": "关闭披露并重新聚焦 DisclosureButton。（可选）传入\n一个 ref 或 HTMLElement 来关注该元素。"
    }
  ],
  "suggestions": [],
  "filename": "DisclosurePanel"
}
